<?php

namespace LaraUtilX\Rules;

use Illuminate\Contracts\Validation\ValidationRule;
use Closure;

class RejectCommonPasswords implements ValidationRule
{
    /**
     * List of common passwords to reject
     */
    private array $commonPasswords = [
        'password',
        '123456',
        '123456789',
        'qwerty',
        'abc123',
        'password123',
        'admin',
        'letmein',
        'welcome',
        'monkey',
        '1234567890',
        'password1',
        'qwerty123',
        'dragon',
        'master',
        'hello',
        'freedom',
        'whatever',
        'qazwsx',
        'trustno1',
        '654321',
        'jordan23',
        'harley',
        'password1',
        'jordan',
        'superman',
        'iloveyou',
        'welcome123',
        '123123',
        'admin123',
        'root',
        'toor',
        'pass',
        'test',
        'user',
        'guest',
        'login',
        '1234',
        '12345',
        '1234567',
        '12345678',
        '123456789',
        '1234567890',
        'qwertyuiop',
        'asdfghjkl',
        'zxcvbnm',
        'qwertyui',
        'asdfghjk',
        'zxcvbn',
        'qwertyu',
        'asdfghj',
        'zxcvb',
        'qwerty',
        'asdfgh',
        'zxcv',
        'qwert',
        'asdfg',
        'zxc',
        'qwer',
        'asdf',
        'zx',
        'qwe',
        'asd',
        'z',
        'qw',
        'as',
        'q',
        'a',
        '1',
        '12',
        '123',
        '111111',
        '000000',
        '666666',
        '888888',
        '999999',
        '11111111',
        '00000000',
        '123321',
        '654321',
        '147258',
        '159753',
        '753159',
        '852741',
        '963852',
        '741852',
        '951753',
        '357159',
        '456789',
        '789456',
        '147852',
        '258741',
        '369852',
        '741963',
        '852963',
        '963741',
        '159357',
        '357951',
        '753951',
        '951357',
        '1111',
        '2222',
        '3333',
        '4444',
        '5555',
        '6666',
        '7777',
        '8888',
        '9999',
        '0000',
        'aaaa',
        'bbbb',
        'cccc',
        'dddd',
        'eeee',
        'ffff',
        'gggg',
        'hhhh',
        'iiii',
        'jjjj',
        'kkkk',
        'llll',
        'mmmm',
        'nnnn',
        'oooo',
        'pppp',
        'qqqq',
        'rrrr',
        'ssss',
        'tttt',
        'uuuu',
        'vvvv',
        'wwww',
        'xxxx',
        'yyyy',
        'zzzz',
        'qwerty1',
        'qwerty12',
        'qwerty123',
        'password1',
        'password12',
        'password123',
        'admin1',
        'admin12',
        'admin123',
        'user1',
        'user12',
        'user123',
        'test1',
        'test12',
        'test123',
        'guest1',
        'guest12',
        'guest123',
        'root1',
        'root12',
        'root123',
        'login1',
        'login12',
        'login123',
        'welcome1',
        'welcome12',
        'welcome123',
        'hello1',
        'hello12',
        'hello123',
        'master1',
        'master12',
        'master123',
        'dragon1',
        'dragon12',
        'dragon123',
        'monkey1',
        'monkey12',
        'monkey123',
        'letmein1',
        'letmein12',
        'letmein123',
        'iloveyou1',
        'iloveyou12',
        'iloveyou123',
        'superman1',
        'superman12',
        'superman123',
        'harley1',
        'harley12',
        'harley123',
        'jordan1',
        'jordan12',
        'jordan123',
        'freedom1',
        'freedom12',
        'freedom123',
        'whatever1',
        'whatever12',
        'whatever123',
        'trustno11',
        'trustno112',
        'trustno1123',
        'qazwsx1',
        'qazwsx12',
        'qazwsx123',
        'qwertyuiop1',
        'qwertyuiop12',
        'qwertyuiop123',
        'asdfghjkl1',
        'asdfghjkl12',
        'asdfghjkl123',
        'zxcvbnm1',
        'zxcvbnm12',
        'zxcvbnm123',
    ];

    /**
     * Create a new rule instance.
     */
    public function __construct()
    {
        // Constructor can be used to customize the common passwords list
        // or load from configuration if needed
    }

    /**
     * Run the validation rule.
     *
     * @param  string  $attribute
     * @param  mixed  $value
     * @param  \Closure  $fail
     * @return void
     */
    public function validate(string $attribute, mixed $value, Closure $fail): void
    {
        if (!is_string($value)) {
            return; // Let other validation rules handle non-string values
        }

        $password = strtolower(trim($value));
        
        if (in_array($password, $this->commonPasswords)) {
            $fail('The :attribute contains a common password that is not allowed.');
        }
    }
}
